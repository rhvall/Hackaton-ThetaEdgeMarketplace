; //
; //  DistributedPopulationCPA.ini
; //  BiSUNAOpenCL
; //
; //  Created by RHVT on 16/02/21.
; //  Copyright Â© 2021 R. All rights reserved.
; //
; //////////////////////////////////////////////////////////
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, version 3 or later.
;
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program. If not, see <http://www.gnu.org/licenses/>.
; //////////////////////////////////////////////////////////


;-------------------------------------------------------
[General]
;-------------------------------------------------------
; For how many generations this execution will take place
Generations = 100000


;-------------------------------------------------------
[Population]
;-------------------------------------------------------
; Iterations performed to each new agent when the population is created. It only affects initialization
NumberInitialMutations = 200

; This number affects how many changes are going to be performed on agents that are derived from parents
; when the reproduction step stakes place
StepMutations = 5

; Quantity of agents that are grouped as population
PopulationSize = 100

; How many individuals will be considered as "parents" for the next generation, given their "novelty"
; measure, which is the "hamming distance" between agents.
NoveltyMapSize = 20

; The following four elements (add/delete Neuron/Connection) are the probabilities of modifying agents
; in a population every time new selection process takes place. Another consideration is the need to
; sum them up to 1, if that rule is violated, the behavior of new agents is not defined.
; **** Start
; Probability to add a new neuron to agents when performing evolution
ChanceAddNeuron = 0.01

; Probability to delete a current neuron to agents when performing evolution
ChanceDelNeuron = 0.01

; Probability to add a new connection to agents when performing evolution
ChanceAddConnection = 0.49

; Probability to delete a new neuron to agents when performing evolution
ChanceDelConnection = 0.49
; **** End

; The probability of a new neuron to have a neuromodulation effect on other neurons, a value that must
; be between 0 and 1.
ChanceNeuromodulation = 0.1

; The probability of a new neuron to be created directly as the control type, a value that must
; be between 0 and 1.
ChanceControlNeuron = 0.2

; The probability of affecting weights on neuron's connections, a value that must be between 0 and 1.
ChanceWeightMutation = 0.5


;-------------------------------------------------------
[Environment]
;-------------------------------------------------------
; How many trials a single agent will be able to repeat
EpisodesPerAgent = 1

; Signal the application if the first run should load from a file
LoadFromFile = false

; Signal the application if the first run should load from a file
SaveToFile = true

; Save population every "n" generations, it will have the same "Environment" name, only appending a timestamp
; to when it was saved and the extension as ".dat"
SaveEveryNGenerations = 50000

; What environment name will be used to execute this program and search for the same name section
; inside the configuration file
EnvironmentName = SymmetricEncryptionCPA

; Name of the file that contains the values needed to configure that environment
EnvironmentConf = DistributedPopulationCPA.ini


;-------------------------------------------------------
[Thread]
;-------------------------------------------------------
; How many concurrent threads should be executed in parallel. For optimal work division, consider a
; number that matches the core count in the target machine as well as the divisibility against the
; population size, which internally will be represented as "cells per thread", which is a simple
; population size divided by thread number. Lastly, make sure that the number of environments matches
; the thread count, specially when dealing with external connections like the OpenAI Gym.
ThreadNumber = 8

;-------------------------------------------------------
[SymmetricEncryptionCPA]
;-------------------------------------------------------
; Number of steps each generation will run, consider that Alice (encryptor) and
; Bob (decryptor) will share equal amount of steps.
MaxSteps = 150

; The number of unsigned short data to be transmitted will be composed of.
PayloadSize = 3

; The number of unsigned short the "password" will be composed of.
KeySize = 3

; The number of steps an adversary should train extra in order to gain
; a competitive advantage over ordinary agents.
MaximumAdversarialAdvantage = 100

; Number of generations it should remain in Max Expected Reward to finalize the environment
NumGensMaxExpectedReward = 20

; This will signal to the environment that the adversary should execute first to
; learn to distinguish between payloads. This flag only applies to CPA environment
AdversaryRequiresTraining = true

; Signal that Alice and Bob should execute training without Eve advantage
PreTrainAB = true

; When this is enabled, it will read A&B networks, take the best agent after 10 episodes
; and will try to find an Eve that will "hack" A&B communication for the number of "MaxSteps".
; Only Eve will continue evolving during this phase.
TestMode = false
